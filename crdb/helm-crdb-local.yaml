# Source: cockroachdb/templates/poddisruptionbudget.yaml
kind: PodDisruptionBudget
apiVersion: policy/v1
metadata:
  name: crdb1-budget
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cockroachdb
      app.kubernetes.io/instance: "crdb"
      app.kubernetes.io/component: cockroachdb
  maxUnavailable: 1
---
# Source: cockroachdb/templates/serviceaccount-certRotateSelfSigner.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: crdb1-rotate-self-signer
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: cockroachdb/templates/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: crdb1
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: cockroachdb/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1-default
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
rules:
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests"]
    verbs: ["create", "get", "watch"]
---
# Source: cockroachdb/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1-default
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crdb1-default
subjects:
  - kind: ServiceAccount
    name: crdb1
    namespace: "default"
---
# Source: cockroachdb/templates/role-certRotateSelfSigner.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1-rotate-self-signer
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "update", "delete"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get"]
    resourceNames:
      - crdb1
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["delete", "get"]
---
# Source: cockroachdb/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get"]
---
# Source: cockroachdb/templates/rolebinding-certRotateSelfSigner.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1-rotate-self-signer
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: crdb1-rotate-self-signer
subjects:
  - kind: ServiceAccount
    name: crdb1-rotate-self-signer
    namespace: "default"
---
# Source: cockroachdb/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crdb1
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: crdb1
subjects:
  - kind: ServiceAccount
    name: crdb1
    namespace: "default"
---
# Source: cockroachdb/templates/service.discovery.yaml
# This service only exists to create DNS entries for each pod in
# the StatefulSet such that they can resolve each other's IP addresses.
# It does not create a load-balanced ClusterIP and should not be used directly
# by clients in most circumstances.
kind: Service
apiVersion: v1
metadata:
  name: crdb1
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: cockroachdb
  annotations:
    # Use this annotation in addition to the actual field below because the
    # annotation will stop being respected soon, but the field is broken in
    # some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    # Enable automatic monitoring of all instances when Prometheus is running
    # in the cluster.
    prometheus.io/scrape: "true"
    prometheus.io/path: _status/vars
    prometheus.io/port: "8080"
spec:
  clusterIP: None
  # We want all Pods in the StatefulSet to have their addresses published for
  # the sake of the other CockroachDB Pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    # The main port, served by gRPC, serves Postgres-flavor SQL, inter-node
    # traffic and the CLI.
    - name: "grpc"
      port: 26257
      targetPort: grpc
    # The secondary port serves the UI as well as health and debug endpoints.
    - name: "http"
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/component: cockroachdb
---
# Source: cockroachdb/templates/service.public.yaml
# This Service is meant to be used by clients of the database.
# It exposes a ClusterIP that will automatically load balance connections
# to the different database Pods.
kind: Service
apiVersion: v1
metadata:
  name: crdb1-public
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: cockroachdb
  annotations:
    service.alpha.kubernetes.io/app-protocols: '{"http":"HTTPS"}'
spec:
  type: "ClusterIP"
  ports:
    # The main port, served by gRPC, serves Postgres-flavor SQL, inter-node
    # traffic and the CLI.
    - name: "grpc"
      port: 26257
      targetPort: grpc
    # The secondary port serves the UI as well as health and debug endpoints.
    - name: "http"
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/component: cockroachdb
---
# Source: cockroachdb/templates/statefulset.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: crdb1
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: cockroachdb
spec:
  serviceName: crdb1
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      app.kubernetes.io/name: cockroachdb
      app.kubernetes.io/instance: "crdb"
      app.kubernetes.io/component: cockroachdb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cockroachdb
        app.kubernetes.io/instance: "crdb"
        app.kubernetes.io/component: cockroachdb
    spec:
      serviceAccountName: crdb1
      initContainers:
        - name: copy-certs
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - "cp -f /certs/* /cockroach-certs/; chmod 0400 /cockroach-certs/*.key"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: certs
              mountPath: /cockroach-certs/
            - name: certs-secret
              mountPath: /certs/
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: cockroachdb
                    app.kubernetes.io/instance: "crdb"
                    app.kubernetes.io/component: cockroachdb
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: cockroachdb
            app.kubernetes.io/instance: "crdb"
            app.kubernetes.io/component: cockroachdb
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      # No pre-stop hook is required, a SIGTERM plus some time is all that's
      # needed for graceful shutdown of a node.
      terminationGracePeriodSeconds: 300
      containers:
        - name: db
          image: "cockroachdb/cockroach:v24.3.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - shell
            - -ecx
            # The use of qualified `hostname -f` is crucial:
            # Other nodes aren't able to look up the unqualified hostname.
            #
            # `--join` CLI flag is hardcoded to exactly 3 Pods, because:
            # 1. Having `--join` value depending on `statefulset.replicas`
            #    will trigger undesired restart of existing Pods when
            #    StatefulSet is scaled up/down. We want to scale without
            #    restarting existing Pods.
            # 2. At least one Pod in `--join` is enough to successfully
            #    join CockroachDB cluster and gossip with all other existing
            #    Pods, even if there are 3 or more Pods.
            # 3. It's harmless for `--join` to have 3 Pods even for 1-Pod
            #    clusters, while it gives us opportunity to scale up even if
            #    some Pods of existing cluster are down (for whatever reason).
            # See details explained here:
            # https://github.com/helm/charts/pull/18993#issuecomment-558795102
            - >-
              exec /cockroach/cockroach
              start --join=${STATEFULSET_NAME}-0.${STATEFULSET_FQDN}:26257,${STATEFULSET_NAME}-1.${STATEFULSET_FQDN}:26257,${STATEFULSET_NAME}-2.${STATEFULSET_FQDN}:26257
              --advertise-host=$(hostname).${STATEFULSET_FQDN}
              --certs-dir=/cockroach/cockroach-certs/
              --http-port=8080
              --port=26257
              --cache=25%
              --max-sql-memory=25%
              --logtostderr=INFO
          env:
            - name: STATEFULSET_NAME
              value: crdb1
            - name: STATEFULSET_FQDN
              value: crdb1.default.svc.cluster.local
            - name: COCKROACH_CHANNEL
              value: kubernetes-helm
          ports:
            - name: grpc
              containerPort: 26257
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: datadir
              mountPath: /cockroach/cockroach-data/
            - name: certs
              mountPath: /cockroach/cockroach-certs/
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health?ready=1
              port: http
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 2
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: "4"
              memory: 8Gi
            requests:
              cpu: "1"
              memory: 512Mi
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
        - name: certs
          emptyDir: {}
        - name: certs-secret
          projected:
            sources:
            - secret:
                name: crdb1-node-secret
                items:
                - key: ca.crt
                  path: ca.crt
                  mode: 256
                - key: tls.crt
                  path: node.crt
                  mode: 256
                - key: tls.key
                  path: node.key
                  mode: 256
      securityContext:
        seccompProfile:
          type: "RuntimeDefault"
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels:
          app.kubernetes.io/name: cockroachdb
          app.kubernetes.io/instance: "crdb"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "10Gi"
---
# Source: cockroachdb/templates/cronjob-ca-certSelfSigner.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: crdb1-rotate-self-signer
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
spec:
  schedule: 0 0 1 */11 *
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
        spec:
          restartPolicy: Never
          containers:
          - name: cert-rotate-job
            image: "gcr.io/cockroachlabs-helm-charts/cockroach-self-signer-cert:1.5"
            imagePullPolicy: "IfNotPresent"
            args:
            - rotate
            - --ca
            - --ca-duration=43800h
            - --ca-expiry=648h
            - --ca-cron=0 0 1 */11 *
            - --readiness-wait=30s
            - --pod-update-timeout=2m
            env:
            - name: STATEFULSET_NAME
              value: crdb1
            - name: NAMESPACE
              value: default
            - name: CLUSTER_DOMAIN
              value: cluster.local
          serviceAccountName: crdb1-rotate-self-signer
---
# Source: cockroachdb/templates/cronjob-client-node-certSelfSigner.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: crdb1-rotate-self-signer-client
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-15.0.0
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "crdb"
    app.kubernetes.io/managed-by: "Helm"
spec:
  schedule: 0 0 */26 * *
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
        spec:
          restartPolicy: Never
          containers:
          - name: cert-rotate-job
            image: "gcr.io/cockroachlabs-helm-charts/cockroach-self-signer-cert:1.5"
            imagePullPolicy: "IfNotPresent"
            args:
            - rotate
            - --ca-duration=43800h
            - --ca-expiry=648h
            - --client
            - --client-duration=672h
            - --client-expiry=48h
            - --node
            - --node-duration=8760h
            - --node-expiry=168h
            - --node-client-cron=0 0 */26 * *
            - --readiness-wait=30s
            - --pod-update-timeout=2m
            env:
            - name: STATEFULSET_NAME
              value: crdb1
            - name: NAMESPACE
              value: default
            - name: CLUSTER_DOMAIN
              value: cluster.local
          serviceAccountName: crdb1-rotate-self-signer