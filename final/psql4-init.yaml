# docker exec -it primary sh -c "echo '
# listen_addresses = '\''*'\'' 
# wal_level = replica
# max_wal_senders = 10
# max_replication_slots = 10
# archive_mode = on
# archive_command = '\''cp %p /var/lib/postgresql/data/archive/%f'\'' 
# ' > /var/lib/postgresql/data/postgresql.conf"

# docker exec -it replica sh -c "echo '
# standby_mode = '\''on'\''
# primary_conninfo = '\''host=primary user=replicator password=replica_pass'\''
# trigger_file = '\''/tmp/trigger'\''
# ' > /var/lib/postgresql/data/recovery.conf"


---
# First stage
# docker exec -it primary psql -U postgres -c "CREATE ROLE replicator REPLICATION LOGIN ENCRYPTED PASSWORD 'replica_pass';"
# host replication replicator 0.0.0.0/0 md5
# docker exec -it primary pg_ctl reload

# Second stage
# docker stop replica
# docker exec primary pg_basebackup -h primary -D /var/lib/postgresql/data -U replicator -v -P --wal-method=stream
# docker start replica

# Verification
# docker exec -it primary psql -U postgres
# SELECT * FROM pg_stat_replication;
# docker exec -it replica psql -U postgres
# SELECT pg_is_in_recovery();

apiVersion: batch/v1
kind: Job
metadata:
  name: psql4-init
  labels:
    app: psql4
spec:
  template:
    spec:
      containers:
      - name: psql4-init
        image: postgres:15
        imagePullPolicy: IfNotPresent
        command:
          - ""
      restartPolicy: OnFailure
---
# Health Check
# docker exec -it primary psql -U postgres
# SELECT * FROM pg_stat_replication;
# docker exec -it replica psql -U postgres
# SELECT pg_is_in_recovery();

apiVersion: batch/v1
kind: Job
metadata:
  name: psql4-health
  labels:
    app: psql4
spec:
  template:
    spec:
      containers:
      - name: psql4-health
        image: postgres:15
        imagePullPolicy: IfNotPresent
        command:
          - ""
      restartPolicy: OnFailure


